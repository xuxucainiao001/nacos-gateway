
#spring-cloud
spring.profiles.active=@{profileActive}
server.port=80
spring.application.name=@{app-name}

#nacos
spring.cloud.nacos.discovery.server-addr=@{nacos.address}
spring.cloud.nacos.discovery.namespace=@{nacos.namespace}
spring.cloud.nacos.discovery.group=nacos_group

#开启springcloud gateway
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


nacos.config.bootstrap.enable=true
nacos.config.server-addr=@{nacos.address}
nacos.config.namespace=@{nacos.namespace}
nacos.config.type=properties
nacos.config.data-id=@{app-name}-@{profileActive}.properties
nacos.config.group=DEFAULT_GROUP



#Feign配置
#开启 熔断
feign.hystrix.enabled=true
##替换掉JDK默认HttpURLConnection实现的 okClient
#feign.okhttp.enabled=true

#ribbon
#ribbon的超时时间要大于hystrix的超时时间, 否则 hystrix自定义的超时时间毫无意义
ribbon.ReadTimeout=10000
ribbon.ConnectTimeout=5000
#禁止重试
ribbon.OkToRetryOnAllOperations=false
#其他服务重试
ribbon.MaxAutoRetriesNextServer=0
#同一台实例的最大自动重试次数
ribbon.MaxAutoRetries=0
#开启Ribbon的饥饿加载模式 启动是创建httpClient,而不是第一次调用时创建
ribbon.eager-load.enabled=true

#Hystrix配置
#feign整合hystrix 光设置Hystrix 超时没用, 要配合ribbon超时 
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=15000
#此属性设置统计滚动窗口的持续时间（以毫秒为单位）
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000
#熔断的阈值，如果滚动窗口的持续时间内服务报错满足10次，熔断器就会打开
hystrix.command.default.circuitBreaker.requestVolumeThreshold=10
#默认5S ， 等5S之后熔断器会处于半开状态，然后下一次请求的正确和错误讲决定熔断器是否真的关闭和是否继续打开
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000

#actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#logback
logging.config=classpath:logback-spring.xml

#sentinel gateway 整合nacos 配置
spring.cloud.sentinel.scg.enabled=true
spring.cloud.sentinel.filter.enabled=true
spring.cloud.sentinel.scg.fallback.mode=response
spring.cloud.sentinel.scg.fallback.response-status=200
spring.cloud.sentinel.scg.fallback.response-body={"code":"5004","message":"limit block error"}

spring.cloud.sentinel.datasource.ds1.nacos.server-addr=@{nacos.address}
spring.cloud.sentinel.datasource.ds1.nacos.data-id=@{app-name}-sentinel-gw-flow-@{profileActive}
spring.cloud.sentinel.datasource.ds1.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.ds1.nacos.namespace=@{nacos.namespace}
spring.cloud.sentinel.datasource.ds1.nacos.data-type=json
#gw-flow:应用限流   gw-api-group:相同应用不同path限流
spring.cloud.sentinel.datasource.ds1.nacos.rule-type=gw-flow


login.config.issuer=login-sso
login.config.subject=client
login.config.secret=123456
login.config.allowMaxExpiredSeconds=600
login.config.validSeconds=600
login.config.paths=/consumer/**





